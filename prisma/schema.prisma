// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String       @unique
  password      String
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  travelPlans   TravelPlan[]
}

model TravelPlan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Details
  planName      String
  origin        Origin
  destination   Destination
  departureDate DateTime
  returnDate    DateTime
  duration      Int       // Number of days
  travelers     Travelers
  budget        Budget

  // Preferences
  preferences   Preferences

  // Generated Itinerary (JSON structure)
  itinerary     Json?

  // Metadata
  status        String    @default("draft") // draft, generated, finalized
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  finalizedAt   DateTime?
}

type Origin {
  country String
  city    String
}

type Destination {
  country String
  city    String
}

type Travelers {
  adults   Int @default(1)
  children Int @default(0)
  infants  Int @default(0)
}

type Budget {
  currency String
  min      Float
  max      Float
}

type Preferences {
  tripPurpose           String
  accommodationTypes    String[]
  interests             String[]
  travelPace            String
  dietaryRestrictions   String[]
  mustVisitPlaces       String?
  specialRequirements   String?
}

model OpenAILog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  planId          String?  @db.ObjectId

  // Request details
  model           String
  prompt          String   @db.String
  systemMessage   String   @db.String
  temperature     Float
  maxTokens       Int

  // Response details
  response        String?  @db.String
  completionTokens Int?
  promptTokens    Int?
  totalTokens     Int?

  // Status and errors
  status          String   // success, error, partial
  errorMessage    String?  @db.String
  parseError      String?  @db.String
  wasRepaired     Boolean  @default(false)

  // Metadata
  durationMs      Int?
  createdAt       DateTime @default(now())
}
